import java.util.*;
import java.io.*;

// 20055 : 컨베이어 벨트 위의 로봇
/*
-- 전제 조건
길이가 N인 컨베이어 벨트(책상이라고 생각하자)
이것을 돌아야 하니 2N의 길이인 벨트가 있다. 위 아래를 감싸고 있고 , 벨트는 길이 1 간격으로 2N개의 칸으로 나뉘어져 있다.
벨트가 돌면서 각각 벨트들은 다음 위치로 이동하고 2N 위치의 벨트는 1로 N위치의 벨트는 N + 1로 움직인다.
그래서 여기서 벨트를 1번은 올리는 위치  , 그리고 N번칸이 있는 위치는 내리는 위치라고 한다.
왜냐하면 1번에다가 올려서 N번에서 내려야하니까 1(물건 올림) -> N(물건 내림)
컨베이어 벨트에 박스 모양 로봇을 하나씩 올리려고 하고 , 이 로봇 박스는 올리는 위치에만 올릴 수 있다.
언제든지 로봇이 내리는 위치에 도달하면 그 즉시 내린다 , 로봇은 컨베이어 벨트 위에서 스스로 이동할 수 있으며 , 로봇을 올리는 위치에 올리거나 로봇이 어떠한 칸으로 이동하면
그 칸의 내구도는 즉시 1만큼 감소한다 , 즉 로봇이 올라가면 그 칸의 내구도가 감소한다는 것이다.
그래서 컨베이어 벨트를 이용해서 로봇들을 건너편으로 옮기려고 한다 , 로봇을 옮기는 과정에서 순서대로 일어나는 일은
1. 벨트가 각 칸위에 있는 로봇과 함께 한 칸 회전한다. -> 2. 가장 먼저 벨트에 올라간 로봇부터 , 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다
, 만일 이동할 수 없다면 가만히 있는다. 부록 1) 로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며 , 그 칸의 내구도가 1 이상 남아 있어야 한다. (아마 끝에서도 못 움직이지 않을까 (내리는 위치))
-> 3.올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다 (컨베이어 벨트 망가질 때까지 계속 올린다.)
-> 4 내구도가 0인 칸의 개수가 K 이상이라면 과정을 종료한다. 그렇지 않으면 1번으로 돌아간다.
내구도가 0인 칸의 개수가 K 이상이라면 과정을 종료할 때 몇 번째 단계가 진행 중이었는지 구해본다. (가장 처음에 수행되는 단계가 1번째 단계이다.)

첫째 줄에 n , k 가 주어지고
둘째 줄부터 컨베이어 벨트의 내구도가 A1 ~ A2n 까지 주어진다.
몇 번째 단계가 진행 중일때 종료되었는지 출력한다. (그니까 이게 몇번째에서 끝났냐를 구하는 것)
벨트 회전 -> 가장 먼저 벨트에 올라간 로봇부터 벨트가 회전하는 방향으로 한칸 이동 -> 올리는 위치에 로봇을 올리는 것(내구도가 0이 아니라면) -> 검사 이것을 반복
그러고서 이 과정들을 몇번 반복했는지 출력하면 되는 문제이다.
-- 틀 설계

 */
public class Main {
    public static void main(String[] args) throws IOException{
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
    }
}
