import java.util.*;
import java.io.*;
import java.util.function.Function;

// 2166 : 다각형의 면적

/**
 * -- 전제조건
 * 포인터가 여러개 주어지고, 그 포인터들이 이루는
 * 다각형의 면적을 구하시오
 *
 * -- 틀 설계
 * ccw 를 이용해서, 구하면 되는데, ccw 를 이용하여서, 삼각형의 면적을 구하는 방법을 사용하면된다.
 * 그 방법은, ccw 나오는 외적의 크기 * (1 / 2) 를 하게 되면, 삼각형의 면적이 나오고,
 * 그에 나오는 부호들은 양의 부호, 음의 부호를 무시하고 다 더해준 다음에,
 * 그 다음에, 절댓값을 취하면 된다라는 듯의 뉘앙스이다.
 *
 * -- 해맸던 점
 * ccw 를 구하는 과정에서, * 을 해주어야 하는데, 모르고 더하기를 해서, 한참 해맸었음
 * 그리고, 이상하게 double 로 계산하면 안되는데, long 으로 계산한다음에, 소수점 처리를 직접해주니까 맞음
 * 왜 그런지는 모르겠으나, 확실한 것은 다각형의 넓이를 구하는 방식은, 위키에서 본 대로 하니까 되었음
 * ccw 구할 때, 실수만 안했어도 훨씬 빨리 풀었을 문제인데 아쉽..
 * Main2 는 도저히 내가 왜틀리는지 모르겠어가지고, 값 비교해본 것, 저 코드 덕분에, ccw 잘못 계산한 거 알았음, 아무리 봐도 내가 한 방법이랑 똑같았는데
 * 안되가지고 이상하게 느껴서 알게되었음
 *
 * -- 정리
 *
 * 해당 위키를 보고, 다각형의 넓이를 ccw 로 인해서, 구하는 방법을 공부하였음
 * https://namu.wiki/w/%EC%8B%A0%EB%B0%9C%EB%81%88%20%EA%B3%B5%EC%8B%9D
 *
 * 이 위키보고, 다각형의 면적을 ccw 로 구할 수 있다는 것과,
 * 그리고, 삼각형의 두 변만 안다면 ccw로 외적을 구해서, 그 외적 * (1 / 2) 가 삼각형의 넓이라는 것도 알 수 있었음.
 *
 * 증명은 실제로 하지는 못하지만, 그렇게 알 수 있었고,
 * 그리고 하나의 기준점에서, 순서대로 0, k - 1, k 를 순서대로 이은 삼각형들을 차츰 구해나가면,
 * 당연하게도 외적의 값은 음수, 혹은 양수, 혹은 0 이기에, 양의 값, 음의 값이 나올 수 밖에 없음
 * 그래서, 그 값들을, 다 절대값을 취해서, 계산하는 것이 아닌, 그냥 계산을 하고, 마지막에 절댓값을 취해주어야 한다.
 * 이 이유는 내가보았을 때, 일단 어떠한 방향 즉 0은 제외하고, 0이면 일직선에 존재하는 것이니, 아얘 삼각형이 존재하지 않는 것이니까, 그래서 시계방향, 반시계 방향의 삼각형만 존재하게 된다.
 *
 * 근데, 이제 시계방향, 반시계방향의 삼각형은 서로 상쇄시키는 삼각형, 즉 약간 겹쳐있는 삼각형??? 인 느낌이다.
 * 그래서,  그냥 -, + 가중치로 나오는 값들을 다 더해야만, 넓이를 구할 때, 어쩔 수 없이 겹쳐있는 삼각형을 구해야 했지만, 그 가중치를 빼서, 정상적인 삼각형의 넓이를 구할 수 있을 것 같다.
 * 그렇기 때문에, 그대로 더한다음에, 마지막에 Math.abs 를 취해서, 절댓값을 얻어내는 것이고, 그리고 또 절댓값을 취하는 결정적인 이유는,
 *
 * 시계 방향의 삼각형이 더 많은 경우에는, 넓이 값이 음수로 나오기 때문이다, 그렇기 때문에 이런 이유 저런 이유로 Math.abs 는 마지막에 취해야 한다.
 * 가장 중요한 것은, 그냥 서로 그대로 외적(음인지 양인지 모름) * (1 / 2) 한 값을 다 더해서,
 * 더 많은 방향(시계 방향, 반시계 방향)의 삼각형이 넓이의 결정적인 요소가 되는 것이다. (반대 방향의 삼각형은, 겹쳐지는 삼각형일 듯, 그래서 빼주거나, 더해주어서 삼각형의 넓이에서 겹치는 부분을 빼는 것과 동일한 효과를 낼 수 있을 듯)
 */
public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Function<String, Long> fun = Long::parseLong;

        int N = Integer.parseInt(br.readLine());
        long[][] points = new long[N][2];
        long res = 0L;
        String[] input;

        for (int i = 0; i < N; i++) {
            input = br.readLine().split(" ");
            // 각각 포인트 삽입
            points[i][0] = fun.apply(input[0]);
            points[i][1] = fun.apply(input[1]);
        }

        for (int i = 2; i < N; i++) {
            // 두 벡터의 외적을 이용하여, 삼각형의 넓이를 반환 받고, 그것들을 계속 더한다.
            // 기준 Pointer 는 그대로 두고, 나머지는 (k - 1), k 로 계속 보낸다.
            res += ccw(points[0][0], points[0][1], points[i - 1][0],
                    points[i - 1][1], points[i][0], points[i][1]);
        }

        res = Math.abs(res);

        if(res % 2 == 0) {
            System.out.println(res/2+".0");
        }else
            System.out.println(res/2+".5");
    }

    // 주어지는 3개의 포인터를 이용하여서, 삼각형을 구한다.
    public static long ccw(long x1, long y1, long x2, long y2, long x3, long y3) {
        long angle = ((x1 * y2) + (x2 * y3) + (x3 * y1)) - ((y1 * x2) + (y2 * x3) + (y3 * x1));

        return angle;
    }
}
